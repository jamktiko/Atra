name: Production Deploy
run-name: ${{ github.actor }} is deploying to production
on:
  push:
    branches:
      - prod
  workflow_dispatch: #Manual triggering
jobs:
  Deploy-Prod:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Use npmmirror registry #temp fix for package problems
        run: npm config set registry https://registry.npmmirror.com
      - name: Install dependencies
        run: npm ci --force
      - name: Install Ionic CLI
        run: npm install -g @ionic/cli
      - name: Install AWS CDK dependencies
        run: |
          cd backend
          npm install
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.SECRETACCESSKEY }}
          aws-region: eu-north-1
      - name: Install AWS CDK
        run: npm install -g aws-cdk
      - name: Deploy backend with CDK
        run: |
          cd backend
          cdk deploy vpc --require-approval never
          cdk deploy database --require-approval never
          cdk deploy frontend --require-approval never
          # cdk deploy cognito --require-approval never # Temporarily disabled
          cdk deploy api --require-approval never
      # below is for automated deployment, remove from comments when needed
      #- name: Fetch API url from CloudfFormation
      #  run: |
      #    API_URL=$(aws cloudformation describe-stacks --stack-name api \
      #    --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" --output text)
      #    echo "API_URL=$API_URL" >> $GITHUB_ENV
      #- name: Inject API URL into environment.prod.ts
      #  run: |
      #    sed -i "s|apiUrl: ''|apiUrl: \"${API_URL}\"|" src/environments/environment.prod.ts
      #    sed -i "s|apiUrl: '.*'|apiUrl: '${API_URL}'|" src/environments/environment.ts
      #- name: Build Ionic projects
      #  run: ionic build --prod
      #- name: Deploy frontend to S3
      #  run: |
      #    aws s3 sync ./hosting s3://atra-frontend-bucket --delete --exact-timestamps
      - name: Run migrations-lambda
        run: |
          aws lambda invoke --function-name migrations --payload '{}' response.json
          cat response.json
      - run: echo "This job's status is ${{ job.status }}."
